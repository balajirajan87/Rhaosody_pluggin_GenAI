start: "@startuml" (title | skinparam | package | class | interface | struct| enum | relationship | note)* "@enduml"

title: "title" description

skinparam: "skinparam" sparam svalue

package: "package" package_name "{" (class | interface | struct| enum | relationship | note)* "}"

class: class_modifier? "class" class_name stereotype? class_extends? class_implements? ("{" (attribute | method)* "}")?

interface: "interface" interface_name interface_extends? "{" method* "}"

class_extends: "extends" class_name

class_implements: "implements" interface_list

interface_extends: "extends" interface_list

interface_list: interface_name ("," interface_name)*

struct: "struct" struct_name ("{" (attribute)* "}")

enum: "enum" enum_name "{" enum_value+ "}"

relationship: relation_source (end1_multiplicity)? relation_type (end2_multiplicity)? relation_target (":" description)?

note: "note" note_position? "of"? note_target note_content "end note"

note_position: "left"  -> left
             | "right"  -> right
             | "top"  -> top
             | "bottom" -> bottom

class_modifier: "abstract" -> abstract

stereotype: "<<" stereotype_name ">>"

// Variables
variable: var ":" varaible_type

attribute: modifier? visibility? variable
         | visibility? modifier? variable

param:  var ":"? param_type?

param_list: [param ("," param)*]

function: method_name "("param_list?")" (":" return_type)?

method: modifier? visibility? function
      | visibility? modifier? function

// Attribute Scope
modifier: "{static}" -> static
         | "{abstract}" -> abstract
         | "<<static>>" -> static
         | "<<abstract>>" -> abstract

relation_type: "--|>" -> inheritance
             | "<|--" -> reverse_inheritance
             | "-->" -> directed_association
             | "*--" -> composition
             | "o--" -> aggregation
             | "..>" -> dependency
             | "..|>" -> realization
             | "<|.." -> reverse_realization
             | "<--*" 
             | ".."
             | "--" -> association
             | "#--"
             | "x--"
             | "}--"
             | "+--"
             | "^--"
             | "<--*"


// Variables and Methods visibility
visibility: "+" -> public
          | "-" -> private
          | "#" -> protected
          | "~" -> package

end1_multiplicity: ESCAPED_STRING
end2_multiplicity: ESCAPED_STRING
description: /.+/
hex_color: /#[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]/
COLOR: /#[a-zA-Z0-9]+/
relation_source: CNAME
relation_target: CNAME
note_target:CNAME 
varaible_type: /.+/
return_type: /.+/
param_type : ALPHANUM_SPECIAL
var: CNAME
sparam: CNAME
svalue: COLOR | CNAME | ESCAPED_STRING | SIGNED_NUMBER | (DIGIT)+ | 
attribute_name: CNAME
method_name: CNAME
class_name: CNAME
interface_name: CNAME
struct_name: CNAME
enum_value: CNAME
enum_name: CNAME
package_name: ESCAPED_STRING
stereotype_name: CNAME
relation_text: (WORD|ESCAPED_STRING|DIGIT|">"|"<")*
COMMENT: "'" /[^\n]*/
note_content: (LINE | NEWLINE)*
LINE: /(?!(end note))(.+)/
NEWLINE: /\\r?\\n/
ALPHANUM_SPECIAL: /[a-zA-Z0-9_!@#$%^&*(\[\]:;"'.<>\/?\\|`~\-]+/

%import common.CNAME
%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WORD
%import common.DIGIT
%import common.WS
%ignore WS
%ignore COMMENT
%ignore /[\t]+/  // Ignore spaces and tabs