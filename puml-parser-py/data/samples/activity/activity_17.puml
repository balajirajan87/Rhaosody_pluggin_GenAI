@startuml
title RBM_Manager Main Activity Flow
 
start
 
partition "Initialization" {
  :RBM_Manager starts;
  :Allocate RAM for ring buffers;
  :Configure FPGA for camera streams;
  :Set static buffer parameters;
  :Register callbacks (RBM_setCallBack);
  :Wait for time sync;
  :Set state to Init;
}
 
partition "State Machine Control" {
  if (Shutdown requested?) then (yes)
    :RBM_Shutdown();
    :Wait for ongoing triggers to finish;
    :Ignore new triggers;
    stop
  else (no)
    :Wait for API call;
  endif
 
  if (Enter Standby?) then (yes)
    :RBM_EnterStandby();
    :Set state to Standby;
  endif
 
  if (ReInit requested?) then (yes)
    :RBM_ReInit();
    :Set state to Init;
  endif
 
  if (Start Buffering?) then (yes)
    :RBM_StartBuffering();
    :Set state to Buffering;
  endif
}
 
partition "Buffer Management" {
  :Create ring buffers (RBM_CreateBufCycAlt, RBM_CreateBufCycSock, ...);
  :Maintain write pointer (locked update);
  :Provide buffer status on request;
}
 
partition "Event Logging" {
  if (Event trigger received?) then (yes)
    :RBM_trigEvtRecOnADISS / RBM_trigEvtRecOnRDC / RBM_trigEvtRecOnOM;
    :Freeze write pointer;
    :Calculate pre-event pointer;
    :Write data to SSD (DMA/file system);
    :Tag entry with timestamp, frame counter, ID, CRC/CMAC;
    :Add metadata (RBM_AddMetaData);
    :Update logger directory;
  endif
 
  if (Stop event recording?) then (yes)
    :RBM_StopEvtRec();
    :RBM_trigEvtRecOff();
  endif
}
 
partition "Partition/Data Maintenance" {
  if (Partition clean requested?) then (yes)
    :RBM_CleanPartition(partition);
  endif
 
  if (Delete entry requested?) then (yes)
    :RBM_DeleteEntryADISS(euuid) / RBM_DeleteEntryRDC(euuid);
  endif
}
 
partition "Monitoring & Callback" {
  :Monitor RAM/SSD/network status;
  if (RAM/SSD/Network failure?) then (yes)
    :RBM_ReqCbk(RAMFailure/SSDFailure/NetworkDowngrade);
    if (SSD failure) then (yes)
      :Switch to EMMC;
    endif
    if (Network packet loss) then (yes)
      :Switch network from 10G to 1G;
    endif
  endif
  :Report RAM/SSD status to client;
  :RBM_cbkASWRBMStatus(state);
}
 
partition "Online Monitoring" {
  if (OM FIFO requested?) then (yes)
    :RBM_GetOMFIFOpath(fifopath);
    :RBM_OpenOMFIFO();
  endif
}
 
partition "State Query" {
  if (State requested?) then (yes)
    :RBM_GetState();
  endif
}
 
stop
@enduml