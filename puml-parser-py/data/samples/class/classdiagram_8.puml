@startuml

title Example UML Diagram with All Elements

skinparam classAttributeIconSize 0
skinparam backgroundColor #EEEBDC

package "Geometry" {
    ' Abstract class
    abstract class Shape {
        +area() : float
        +perimeter() : float
        {abstract} draw() : void
    }

    ' Concrete class with inheritance and composition
    class Circle extends Shape {
        -radius : float
        +area() : float
        +perimeter() : float
        +draw() : void
    }

    class Drawing {
        +shape : Shape
        +addShape(s : Shape) : void
        +drawAll() : void
    }

    ' Note
    note right of Shape
        Shape is an abstract base class
        Circle is a shape
    end note

    Drawing *-- Shape : contains
    Circle --|> Shape
}

package "Math" {
    ' Static class
    class MathUtils {
        {static} PI : float
        {static} add(a : int, b : int) : int
        +sqrt(x : float) : float
    }
}

package "Data" {
    ' Structs
    struct Point {
        +x : float
        +y : float
    }

    struct Rectangle {
        +topLeft : Point
        +bottomRight : Point
    }

    Rectangle o-- Point : corners
}

package "System" {
    ' Interface and enum
    interface Runnable {
        +run() : void
    }

    enum Status {
        NEW
        RUNNING
        STOPPED
    }

    class Robot implements Runnable {
        +run() : void
        +charge() : void
        {static} robotCount : int
    }

    Robot ..> Status : uses
    Robot ..|> Runnable
}

class Collar {
    +size : int
}

class MathUtils {
    {static} add(a : int, b : int) : int
}

' Abstract class with abstract and concrete methods
abstract class Animal {
    +name : String
    {abstract} makeSound() : void
    +sleep() : void
}

' Concrete class extending abstract class and implementing interface
class Dog extends Animal implements Pet {
    +breed : String
    +makeSound() : void
    +sleep() : void
    {static} species : String
}

' Interface with method
interface Pet {
    +play() : void
}

' Enum definition
enum Color {
    RED
    GREEN
    BLUE
}

' Structs
struct Point {
    +x : float
    +y : float
}

struct Rectangle {
    +topLeft : Point
    +bottomRight : Point
}

' Association: Dog associated with Color
Dog --> Color : has

' Aggregation: Rectangle aggregates Point
Rectangle o-- Point : corners

' Composition: Dog composed with Collar
Dog *-- Collar : wears

' Dependency: Dog depends on MathUtils
Dog ..> MathUtils : uses

' Aggregation
Drawing o--  Shape : draws

' Dependency
Circle ..> MathUtils : uses

' Composition
Drawing *-- Shape : abc

' Association
Robot --> Drawing : draws on

' Note on Dog
note right of Dog
    Dog is a concrete class
    that extends Animal and
    implements Pet
end note

@enduml